// 0408.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

int main()
{
    int a = 3;
    /// 포인터 변수 : 선언 시에 *을 붙인다. - 자료형 * 변수;
    ///     Ex) int p; ==> int *p; char c; ==> char *c;
    /// 포인터 연산자 : 오직 2개만! 사용
    ///     1. * 연산자
    ///         1) 선언시에 사용 
    ///             변수 선언 : 자료형 * 변수명; 
    ///         2) 사용시에 사용 ==> 값에 접근
    ///             변수 사용 : *포인터 변수
    ///     2. & 연산자
    ///         주소 값을 알아낼 때 : &변수명
    /// ==> int 자료형의 주소를 가리키는 포인터 변수 p를 선언
    /// ==> a변수의 주소를 알아내서 포인터 변수 p에 할당

    int* p = &a;
    /// 값을 갖는다. <== int p Vs. int *p ==> 주소를 가리킨다.
/*
    p = 3;      /// 주소 = 값;
    a = &a;     /// 값 = 주소;
*/
    /// *포인터변수 ==> 포인터 변수가 가리키는 변수와 동일하게 처리
    /// *p == a = 1
    *p = 1;
    printf("a[ %d ] *p[ %d ]\n", a, *p);

    //printf("a : %d %d %d\n", a, &a, *a);
    printf("a : %d 0x%p\n", a, &a);
    printf("p : 0x%p 0x%p %d\n", p, &p, *p);


    //int* p1, p2, *p3;       /// 절대 선언하지 말아야 하는 형식
    int* p1 = NULL;         /// 포인터 초기화 - C스타일
    /// OS의 메모리 공간을 누구나 접근할 수 있는 모드 : real-mode
    /// OS 메모리 공간 접근을 방지하는 모드 : protected-mode
    int* p4 = nullptr;      /// C++ 스타일의 포인터 초기화
    int p2 = 10;
    //*p4 = 9;      /// 허용되지 않는 연산
    printf("Hello World\n");

    /// 포인터 자료형과 대상 자료형은 항상 일치해야 한다!
    /// 자료형이 다른경우 의도하지 않은 동작이 발생 ==> 막아놓음
/*
    int a1 = 9;
    char* cp = &a1;
    char c = 65;
    int* ip = &c;
*/
    /// 포인터 연산에서 뒤에 붙는 숫자는 내부적으로 변경이 발생
    p--;
    p++;
    p = p + 1;      /// p = p + 1 ==> p = p + sizeof( int ) * 1
    p = p - 3;      /// p = p - 3 ==> p = p - sizeof( int ) * 3
    printf("Hello World - 2\n");

    /// 배열과 유사한 [, ] 연산자
    /// 배열 문법 <== p[ N ] == *( p + N ) ==> 포인터 문법
    /// *( p(포인터) + N(정수) )
    /// *( 포인터 ) ==> 값
    int arrary[5] = { 3, 5, 7, 9, 11 };
    arrary[2] = 99;
    *(arrary + 3) = 199;
    for (int i = 0; i < 5; i++)
    {
        printf("arrary[ %d ] = %d\n", i, arrary[i]);
    }

    /// void 일반 변수는 선언 자체가 불가능!
    /// 메모리 할당 크기가 아예 정의되지 않음.
    /// void*는 위치를 가리키는 용도 이외에는 사용이 애초에 불가능!
    //void a = 3;
    char c;
    double d;
    int i;
    void* cp = &c;
    void* dp = &d;
    void* ip = &i;
/*
    cp++;
    dp = dp + 1;
    ip = ip + 3;
*/
}
